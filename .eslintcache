[{"/home/petit/projects/react/chunknorrisassesment/src/index.js":"1","/home/petit/projects/react/chunknorrisassesment/src/App.js":"2","/home/petit/projects/react/chunknorrisassesment/src/JokeCard.js":"3"},{"size":420,"mtime":1629309728136,"results":"4","hashOfConfig":"5"},{"size":6723,"mtime":1629797519861,"results":"6","hashOfConfig":"5"},{"size":1598,"mtime":1629270268863,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"x0imxm",{"filePath":"11","messages":"12","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/petit/projects/react/chunknorrisassesment/src/index.js",[],["17","18"],"/home/petit/projects/react/chunknorrisassesment/src/App.js",["19","20","21","22","23","24","25"],"import React, { useEffect, useState } from 'react';\nimport {\n    AppBar,\n    Badge,\n    Container,\n    CircularProgress,\n    Tab,\n    Tabs,\n    Typography,\n    TextField,\n    FormControlLabel,\n    Checkbox\n} from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles} from '@material-ui/core/styles';\nimport  JokeCard  from './JokeCard';\n\nconst useStyles = makeStyles({\n\n});\n\nfunction Spinner(){\n    return(\n        <div style={{textAlign: 'center', padding: '2rem' }}>\n            <CircularProgress/>\n        </div>\n    )}\n    \n\nconst likeJoke = (id) => {\n    console.log(\"uliking joke, \" + id);\n};\n\n\nconst unlikeJoke = (id) => {\n    console.log(\"unliking joke, \" + id);\n};\n\nfunction App() {\n\n    const [jokes, setJokes] = useState([]);\n    const [jokesToShow, setJokesToShow] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [filterCategories, setFilterCategories] = useState([]);\n\n    const [likedJokes, setLikedJokes] = useState([]);\n    const [currentTab, setCurrentTab] = useState(0);\n\n    const [firstName, setFirstName] = useState([]);\n    const [lastName, setlastName] = useState([]);\n\n    const[loading, setLoading] = useState([false]);\n\n    const classes = useStyles();\n\n\n    useEffect(() => {\n        setLoading(true)\n        fetchAndSetJokes ()\n        fetch('http://api.icndb.com/categories')\n        .then(res => res.json())\n        .then(res => {\n            setCategories(res.value);\n            setFilterCategories(res.value)\n        })\n        \n        .catch(err => console.log(err))\n    }, []);\n\n    const fetchAndSetJokes = () => {\n        fetch('https://api.icndb.com/jokes')\n        .then(res => res.json())\n        .then(res => {\n            console.log(res);\n            setJokes(res.value)\n            setJokesToShow(res.value.slice(0, 10))\n        })\n        .catch((err) => console.log(err));\n    }\n\n    const likeJoke = (id) => {\n        if (likedJokes.find((j) => j.id === id)) return;\n        const likedJoke = jokes.find((j) => j.id === id);\n        setLikedJokes([likedJoke, ...likedJokes])\n    };\n\n    const unlikeJoke = (id) => {\n        const newLikedJokes =  likedJokes.filter((j) => j.id !== id);\n        setLikedJokes(newLikedJokes);\n    };\n\n    const changeTab = (event, value) => {\n        setCurrentTab(value)\n    };\n\n\n    const addMoreJokes = () => {\n        setLoading(true)\n        setTimeout(() => {\n        setJokesToShow(jokes.slice(0, jokesToShow.length + 10));\n        setLoading(false) \n        }, 400);\n    };\n\n   const observeElement = (bottomJoke) => {\n       if (!bottomJoke) return;\n    const observer = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting === true) {\n        addMoreJokes();\n        observer.unobserve(bottomJoke);\n        }\n    },{\n        threshold: 1,\n    } );\n    observer.observe(bottomJoke);\n   };\n\n   useEffect(() => {\n    const bottomJokeE1 = document.getElementById(\n        `joke-${jokesToShow.length -1}`    \n    );\n    observeElement(bottomJokeE1);\n}, [jokesToShow]);\n  \nconst toggleCategory = (event, value) => {\n    const category = event.target.name\n\n    if(filterCategories.includes(category)){\n        {/*if category found then remove else*/}\n        const filterCategoriesCopy = [...filterCategories];\n        const categoryIndex = filterCategoriesCopy.indexOf(category);\n        filterCategoriesCopy.splice(categoryIndex, 1);\n        setFilterCategories(filterCategoriesCopy);\n        {/**Add it */}\n    } else{\n        setFilterCategories([...filterCategories, category])\n    }\n};\n\nconst categoryMatch = (jokeCategories) =>{\n    for(let i = 0; i < jokeCategories.length; i++){\n        if(filterCategories.includes(jokeCategories[i])) return true\n    }\n    return false\n};\n\nconst changeName = () => {\n    if(firstName === '' || lastName ==='') return\n    \n} \n    return ( \n        <div className = \"App\" >\n        <CssBaseline />\n        <Container>\n            <Typography variant = \"h3\" align = \"center\" > Chuck Norris jokes </Typography>\n\n            <AppBar style={{marginBottom: 20}} position=\"sticky\" >\n            <Tabs value={currentTab} onChange={changeTab} centered>\n                <Tab label= \"Home\" id=\"home-tab\" arial-controls=\"home-panel\"/>\n                <Tab label= {\n                    <Badge\n                        color=\"secondary\"\n                        badgeContent={\n                            likedJokes.length > 0 ? likedJokes.length : null\n                        }>\n                            Likes\n                        </Badge>\n                } id=\"like-tab\" arial-controls=\"likes-panel\"/>    \n            </Tabs> \n            </AppBar>\n\n            <div role=\"tabpanel\" hidden={currentTab !== 0}>\n                <form onSubmit={changeName} noValidate>\n                    <TextField \n                        id=\"FirstName\"\n                        label=\"First Name\"\n                        value={firstName}\n                        onChange={ e => setFirstName(e.target.value)}\n                    />\n\n                    <TextField \n                        id=\"lastName\"\n                        label=\"Last Name\"\n                        value={lastName}\n                        onChange={ e => setlastName(e.target.value)}\n                    />\n                </form>\n                {/*Category filters */}\n                {categories.map((category) => (\n                    <FormControlLabel\n                        key={category}\n                            control ={ \n                                <Checkbox name={category} \n                                color=\"primary\" \n                                checked={filterCategories.includes}\n                                onChange={toggleCategory}/> }\n                                label={category}\n                    />\n                ))}\n                {/*Joke Cards*/}\n                { jokesToShow.map((joke, index)=> {\n                    if (joke.categories.length === 0 || \n                        categoryMatch(joke.categories)) {\n                        \n                return(\n                    <JokeCard key={joke.id}\n                     joke={joke}\n                     likeJoke={likeJoke}\n                     unlikeJoke={unlikeJoke}\n                     index={index}/>\n                );\n                }})}\n                {loading && Spinner}\n            </div>\n                 \n\n            <div role=\"tabpanel\" hidden={currentTab !== 1}>\n            { likedJokes.map((joke) => ( \n                <JokeCard key={joke.id} joke={joke} likeJoke={likeJoke} unlikeJoke={unlikeJoke}/> \n            ))}       \n            </div>\n             \n        </Container> \n        </div>\n);\n}\n\nexport default App;","/home/petit/projects/react/chunknorrisassesment/src/JokeCard.js",[],["26","27"],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":30,"column":7,"nodeType":"34","messageId":"35","endLine":30,"endColumn":15},{"ruleId":"32","severity":1,"message":"36","line":35,"column":7,"nodeType":"34","messageId":"35","endLine":35,"endColumn":17},{"ruleId":"32","severity":1,"message":"37","line":54,"column":11,"nodeType":"34","messageId":"35","endLine":54,"endColumn":18},{"ruleId":"38","severity":1,"message":"39","line":123,"column":4,"nodeType":"40","endLine":123,"endColumn":17,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":129,"column":9,"nodeType":"44","messageId":"45","endLine":129,"endColumn":49},{"ruleId":"42","severity":1,"message":"43","line":134,"column":9,"nodeType":"44","messageId":"45","endLine":134,"endColumn":23},{"ruleId":"46","severity":1,"message":"47","line":201,"column":48,"nodeType":"48","messageId":"49","endLine":201,"endColumn":50},{"ruleId":"28","replacedBy":"50"},{"ruleId":"30","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'likeJoke' is assigned a value but never used.","Identifier","unusedVar","'unlikeJoke' is assigned a value but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'observeElement'. Either include it or remove the dependency array.","ArrayExpression",["54"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["52"],["53"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [jokesToShow, observeElement]",{"range":"57","text":"58"},[3039,3052],"[jokesToShow, observeElement]"]