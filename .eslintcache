[{"/home/petit/projects/react/chunknorrisassesment/src/index.js":"1","/home/petit/projects/react/chunknorrisassesment/src/App.js":"2","/home/petit/projects/react/chunknorrisassesment/src/JokeCard.js":"3"},{"size":428,"mtime":1627977527326,"results":"4","hashOfConfig":"5"},{"size":3214,"mtime":1629274657569,"results":"6","hashOfConfig":"5"},{"size":1598,"mtime":1629270268863,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"x0imxm",{"filePath":"11","messages":"12","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/petit/projects/react/chunknorrisassesment/src/index.js",[],["16","17"],"/home/petit/projects/react/chunknorrisassesment/src/App.js",["18","19","20","21"],"import React, { useEffect, useState } from 'react';\nimport {\n    AppBar,\n    Container,\n    Tab,\n    Tabs,\n    Typography,\n} from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles} from '@material-ui/core/styles';\nimport  JokeCard  from './JokeCard';\n\nconst useStyles = makeStyles({\n\n})\n\n\nconst likeJoke = (id) => {\n    console.log(\"uliking joke, \" + id);\n}\n\n\nconst unlikeJoke = (id) => {\n    console.log(\"unliking joke, \" + id);\n}\n\nfunction App() {\n\n    const [jokes, setJokes] = useState([]);\n    const [jokesToShow, setJokesToShow] = useState([]);\n\n    const [likedJokes, setLikedJokes] = useState([]);\n    const [currentTab, setCurrentTab] = useState(0);\n\n    const classes = useStyles();\n\n\n    useEffect(() => {\n        fetch('https://api.icndb.com/jokes')\n            .then(res => res.json())\n            .then(res => {\n                console.log(res);\n                setJokes(res.value)\n                setJokesToShow(res.value.slice(0, 10))\n                observeElement()\n            })\n            .catch((err) => console.log(err));\n    }, []);\n\n    const likeJoke = (id) => {\n        if (likedJokes.find((j) => j.id === id)) return;\n        const likedJoke = jokes.find((j) => j.id === id);\n        setLikedJokes([likedJoke, ...likedJokes])\n    };\n\n    const unlikeJoke = (id) => {\n        const newLikedJokes =  likedJokes.filter((j) => j.id !== id);\n        setLikedJokes(newLikedJokes);\n    };\n\n    const changeTab = (event, value) => {\n        setCurrentTab(value)\n    };\n\n   const observeElement = () => {\n    const observer = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting === true) {\n            console.log(\"Reached bottom of Code\")\n        }\n    },{\n        threshold: 1\n    } )\n\n    const bottomJokeId = `joke-${jokesToShow.length -1}`\n    const bottomJokeE1 = document.getElementById(bottomJokeId);\n    console.log(bottomJokeE1)\n    observer.observe(bottomJokeE1)\n   };\n\n    return ( \n        <div className = \"App\" >\n        <CssBaseline />\n        <Container>\n            <Typography variant = \"h1\" align = \"center\" > Chuck Norris jokes </Typography>\n\n            <AppBar style={{marginBottom: 20}} position=\"sticky\" >\n            <Tabs value={currentTab} onChange={changeTab} centered>\n                <Tab label= \"Home\" id=\"home-tab\" arial-controls=\"home-panel\"/>\n                <Tab label= \"Likes\" id=\"like-tab\" arial-controls=\"likes-panel\"/>    \n            </Tabs> \n            </AppBar>\n\n            <div role=\"tabpanel\" hidden={currentTab !==0}>\n                { jokesToShow.map((joke, index)=> {\n                return(\n                    <JokeCard key={joke.id}\n                     joke={joke}\n                     likeJoke={likeJoke}\n                     unlikeJoke={unlikeJoke}\n                     index={index}/>\n                )})}\n            </div>\n                 \n\n            <div role=\"tabpanel\" hidden={currentTab !== 1}>\n            { likedJokes.map((joke) => ( \n                <JokeCard key={joke.id} joke={joke} likeJoke={likeJoke} unlikeJoke={unlikeJoke}/> \n            ))}       \n            </div>\n             \n        </Container> \n        </div>\n);\n}\n\nexport default App;","/home/petit/projects/react/chunknorrisassesment/src/JokeCard.js",[],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":18,"column":7,"nodeType":"28","messageId":"29","endLine":18,"endColumn":15},{"ruleId":"26","severity":1,"message":"30","line":23,"column":7,"nodeType":"28","messageId":"29","endLine":23,"endColumn":17},{"ruleId":"26","severity":1,"message":"31","line":35,"column":11,"nodeType":"28","messageId":"29","endLine":35,"endColumn":18},{"ruleId":"32","severity":1,"message":"33","line":48,"column":8,"nodeType":"34","endLine":48,"endColumn":10,"suggestions":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'likeJoke' is assigned a value but never used.","Identifier","unusedVar","'unlikeJoke' is assigned a value but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'observeElement'. Either include it or remove the dependency array.","ArrayExpression",["38"],"no-global-assign","no-unsafe-negation",{"desc":"39","fix":"40"},"Update the dependencies array to be: [observeElement]",{"range":"41","text":"42"},[1101,1103],"[observeElement]"]